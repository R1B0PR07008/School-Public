from pydub import AudioSegment
from numpy.random import uniform
import numpy as np

def make_audios(file):
    filename = file
    sound = AudioSegment.from_file(filename, format=filename[-3:])

    octaves = 0.5
    one_second = 2 *1000

    for octaves in np.linspace(-1,1,21):
        new_sample_rate = int(sound.frame_rate * (2.0 ** octaves))
        hipitch_sound = sound._spawn(sound.raw_data, overrides={'frame_rate': new_sample_rate})
        hipitch_sound = hipitch_sound.set_frame_rate(44100)
    #export / save pitch changed sound
        hipitch_sound_out = hipitch_sound[:one_second]
        hipitch_sound_out.export(f"octave_{octaves}.wav", format="wav")

    #* This code generates the files with the sound  of a guitar note A minor shifted up or down an octave.
    #* It uses the PyDub library to manipulate audio and Numpy for mathematical operations.
    #* The variable "octaves" is used to change the pitch of the sound by altering its sample rate.
    #* For each iteration through the loop, the program creates a new audio segment with a different sample rate,
    #* Then extracts one second of that segment to ensure the file isn't too long. This two second slice is saved
    #* To the "hipitch_sound_out" variable, which is later exported to a .wav file labeled with the number of octaves
    # these comments were generated by the VScode AI, I think...
